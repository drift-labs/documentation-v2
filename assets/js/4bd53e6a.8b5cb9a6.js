"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7050],{2672:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var o=t(5893),r=t(1151);const i={title:"Tutorial- JIT Maker Bot",slug:"isEC-tutorial-jit-maker-bot",createdAt:"Mon Aug 15 2022 18:33:09 GMT+0000 (Coordinated Universal Time)",updatedAt:"Mon May 15 2023 12:16:34 GMT+0000 (Coordinated Universal Time)"},s="Getting Started",a={id:"Guides/Tutorial_ JIT Maker Bot",title:"Tutorial- JIT Maker Bot",description:"Market orders go through the Just-In-Time (JIT) Auctions where Makers fight to fill orders before the order is allowed to fill against the Drift AMM.&#x20;",source:"@site/docs/Guides/Tutorial_ JIT Maker Bot.md",sourceDirName:"Guides",slug:"/Guides/isEC-tutorial-jit-maker-bot",permalink:"/documentation-v2/docs/Guides/isEC-tutorial-jit-maker-bot",draft:!1,unlisted:!1,editUrl:"https://github.com/drift-labs/documentation-v2/blob/master/docs/Guides/Tutorial_ JIT Maker Bot.md",tags:[],version:"current",frontMatter:{title:"Tutorial- JIT Maker Bot",slug:"isEC-tutorial-jit-maker-bot",createdAt:"Mon Aug 15 2022 18:33:09 GMT+0000 (Coordinated Universal Time)",updatedAt:"Mon May 15 2023 12:16:34 GMT+0000 (Coordinated Universal Time)"},sidebar:"mySidebar",previous:{title:"Tutorial- Bots",permalink:"/documentation-v2/docs/Guides/gss4-tutorial-bots"},next:{title:"Tutorial- Liquidation Bot",permalink:"/documentation-v2/docs/Guides/IsAx-tutorial-liquidation-bot"}},c={},d=[{value:"Streaming User Orders",id:"streaming-user-orders",level:2},{value:"Bidding on JIT Auctions",id:"bidding-on-jit-auctions",level:2},{value:"Determine how much longer the auction will last",id:"determine-how-much-longer-the-auction-will-last",level:2},{value:"Tracking Open Positions and Orders",id:"tracking-open-positions-and-orders",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Market orders go through the ",(0,o.jsx)(n.a,{href:"../0%20About%20Drift%20v2/6%20Just-In-Time%20_JIT_%20Auctions",children:"Just-In-Time (JIT) Auctions"})," where Makers fight to fill orders before the order is allowed to fill against the ",(0,o.jsx)(n.a,{href:"docs/About%20Drift%20v2/1%20Drift%20AMM",children:"Drift AMM"}),". "]}),"\n",(0,o.jsxs)(n.p,{children:["JIT Maker Bots maintain a local copy of the decentralised orderbook (DLOB) (see: ",(0,o.jsx)(n.a,{href:"../0%20About%20Drift%20v2/4%20Keepers%20_%20Decentralised%20Orderbook",children:"Keepers & Decentralised Orderbook"}),") in order to see which orders are in the auction phase and can be bid on."]}),"\n",(0,o.jsx)(n.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"\u2620\ufe0f***"})," This bot requires collateral to run. This tutorial is a developer's guide and holds no responsibility over bot outcomes.***"]}),"\n",(0,o.jsxs)(n.p,{children:["The reference implementation of the JIT Maker Bot is available ",(0,o.jsx)(n.a,{href:"https://github.com/drift-labs/keeper-bots-v2/blob/master/src/bots/jitMaker.ts",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Follow the instructions at ",(0,o.jsx)(n.a,{href:"../0%20About%20Drift%20v2/3%20Keeper%20Bots",children:"Keeper Bots"})," to set the required environment variables, initialise the",(0,o.jsx)(n.code,{children:"ClearingHouseUser"})," and deposit some collateral."]}),"\n",(0,o.jsx)(n.p,{children:"Start the JIT Maker Bot:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"yarn run dev:jitmaker\n"})}),"\n",(0,o.jsx)(n.h1,{id:"technical-explanation",children:"Technical Explanation"}),"\n",(0,o.jsx)(n.h2,{id:"streaming-user-orders",children:"Streaming User Orders"}),"\n",(0,o.jsx)(n.p,{children:"The Typescript SDK exposes an EventSubscriber object that you can use to receive market orders on-chain."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { EventSubscriber, OrderRecord } from "@drift-labs/sdk";\n\n// clearingHouse init omitted for brevity\n\nconst pollEventsConfig = {\n    type: "polling",\n    frequency: 1000,\n};\nconst websocketEventsConfig = {\n    type: "websocket",\n};\n\nconst eventSubscriber = new EventSubscriber(connection, clearingHouse.program, {\n    maxTx: 8192,\n    maxEventsPerType: 8192,\n    orderBy: "blockchain",\n    orderDir: "desc",\n    commitment: "confirmed",\n    logProviderConfig: pollEventsConfig,\n});\neventSubscriber.subscribe();\n\neventSubscriber.eventEmitter.on("newEvent", async (event) => {\n    if (event.eventType === "OrderRecord") {\n        const order = event as OrderRecord;\n        // 1) update dlob\n        // 2) get orders from DLOB still in auction\n        // 3) bid on auctions\n    }\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"bidding-on-jit-auctions",children:"Bidding on JIT Auctions"}),"\n",(0,o.jsxs)(n.p,{children:["Technical details on the JIT Auction and its pricing can be found at ",(0,o.jsx)(n.a,{href:"../0%20About%20Drift%20v2/6%20Just-In-Time%20_JIT_%20Auctions",children:"Just-In-Time (JIT) Auctions"}),". The reference implementation acts on each user order received and makes the order in the opposite direction at the auction end price with a random order size between ",(0,o.jsx)(n.code,{children:"20"})," and ",(0,o.jsx)(n.code,{children:"MAX_TRADE_SIZE_QUOTE"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// after finding a DLOB node still in the auction period\nconst jitMakerDirection = isVariant(nodeToFill.node.order.direction, "long")\n    ? PositionDirection.SHORT\n    : PositionDirection.LONG;\n\n// the auction start price will always be valid, but is not necessarily the best price\nconst jitMakerPrice = nodeToFill.node.order.auctionStartPrice;\n\n// fill the entire order\nconst baseAmountToFill = nodeToFill.node.order.baseAssetAmount.sub(\n    nodeToFill.node.order.baseAssetAmountFilled\n);\n\nconst txSig = await this.driftClient.placeAndMake(\n    {\n        orderType: OrderType.LIMIT,\n        marketIndex: nodeToFill.node.order.marketIndex,\n        baseAssetAmount: baseAmountToFill,\n        direction: jitMakerDirection,\n        price: jitMakerPrice,\n        postOnly: true,\n        immediateOrCancel: true,\n    },\n    {\n        taker: action.node.userAccount,\n        order: action.node.order,\n    }\n);\nconsole.log(`Bid on JIT auction: ${txSig}`);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"determine-how-much-longer-the-auction-will-last",children:"Determine how much longer the auction will last"}),"\n",(0,o.jsx)(n.p,{children:"It may be helpful to determine how much time is left in the order's auction in order to get the current dutch auction price:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// determine how much auction time is left\nconst orderSlot = nodeToFill.node.order.slot.toNumber();\nconst currSlot = slotSubscriber.getSlot();\nconst aucDur = new BN(nodeToFill.node.order.auctionDuration);\nconst aucEnd = orderSlot + aucDur;\n\nconsole.log(\n    `it has been ${currSlot - orderSlot} slots since order, auction ends in ${\n        aucEnd - currSlot\n    } slots`\n);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"tracking-open-positions-and-orders",children:"Tracking Open Positions and Orders"}),"\n",(0,o.jsxs)(n.p,{children:["The main ",(0,o.jsx)(n.code,{children:"ClearingHouse"})," object from the SDK will update (polling or WebSocket) the user's account details behind the scenes. You can access the open orders and open positions of the user account by reading the ",(0,o.jsx)(n.code,{children:"positions"})," and ",(0,o.jsx)(n.code,{children:"orders"})," object of the ",(0,o.jsx)(n.code,{children:"ClearingHouseUser"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// you can force the sdk to fetch latest account data\nawait this.driftClient.fetchAccounts();\nawait this.driftClient.getUser().fetchAccounts();\n\nconst user = this.driftClient.getUser();\n\n// check open positions\nfor (const p of user.getUserAccount().positions) {\n    if (p.baseAssetAmount.isZero()) {\n        // no open position in this index\n        continue;\n    }\n\n    console.log(p);\n}\n\n// check open orders\nfor (const o of user.getUserAccount().orders) {\n    if (isVariant(order.status, "init")) {\n        // no open order in this index\n        continue;\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var o=t(7294);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);